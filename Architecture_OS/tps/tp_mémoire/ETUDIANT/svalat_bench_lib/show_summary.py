#!/usr/bin/env python3
"""
Script pour afficher un r√©sum√© rapide des r√©sultats du benchmark
"""

import pandas as pd

def display_summary(csv_file):
    """
    Affiche un r√©sum√© des r√©sultats du benchmark
    """
    df = pd.read_csv(csv_file)
    df = df[df['size_ko'] > 0]
    
    print("\n" + "="*60)
    print("  R√âSUM√â DU BENCHMARK HP_MALLOC")
    print("="*60 + "\n")
    
    print(f"üìä Nombre total de mesures : {len(df)}")
    print(f"üìè Plage de tailles test√©es : {df['size_ko'].min()} Ko ‚Üí {df['size_ko'].max()} Ko")
    print(f"‚è±Ô∏è  Temps d'acc√®s : {df['time_ms'].min():.3f} ms ‚Üí {df['time_ms'].max():.3f} ms")
    print(f"üìà Temps moyen global : {df['time_ms'].mean():.3f} ms")
    
    print("\n" + "-"*60)
    print("  PERFORMANCE PAR NIVEAU DE CACHE")
    print("-"*60 + "\n")
    
    ranges = [
        (0, 128, "üîπ L1 Cache (0-128 Ko)", "green"),
        (128, 512, "üî∏ L2 Cache (128-512 Ko)", "yellow"),
        (512, 4096, "üî∂ L3 Cache (512 Ko-4 Mo)", "orange"),
        (4096, 14336, "üî¥ Huge Pages (4-14 Mo)", "red"),
    ]
    
    for start, end, label, _ in ranges:
        subset = df[(df['size_ko'] >= start) & (df['size_ko'] < end)]
        if len(subset) > 0:
            print(f"{label}")
            print(f"  ‚Ä¢ Temps moyen  : {subset['time_ms'].mean():6.3f} ms")
            print(f"  ‚Ä¢ Temps m√©dian : {subset['time_ms'].median():6.3f} ms")
            print(f"  ‚Ä¢ √âcart-type   : {subset['time_ms'].std():6.3f} ms")
            print(f"  ‚Ä¢ Min / Max    : {subset['time_ms'].min():6.3f} / {subset['time_ms'].max():6.3f} ms")
            print(f"  ‚Ä¢ Mesures      : {len(subset)}")
            print()
    
    print("-"*60)
    print("  POINTS REMARQUABLES")
    print("-"*60 + "\n")
    
    # Trouver les pics de latence
    worst_5 = df.nlargest(5, 'time_ms')
    print("‚ö†Ô∏è  Top 5 des latences les plus √©lev√©es :")
    for idx, row in worst_5.iterrows():
        print(f"  ‚Ä¢ {row['size_ko']:5.0f} Ko ‚Üí {row['time_ms']:6.3f} ms")
    
    print()
    
    # Trouver les meilleures performances
    best_5 = df.nsmallest(5, 'time_ms')
    print("‚úÖ Top 5 des latences les plus faibles :")
    for idx, row in best_5.iterrows():
        print(f"  ‚Ä¢ {row['size_ko']:5.0f} Ko ‚Üí {row['time_ms']:6.3f} ms")
    
    print("\n" + "="*60)
    print("  üìÅ Fichiers disponibles :")
    print("="*60)
    print("  ‚Ä¢ results_hp_malloc.txt  - R√©sultats bruts")
    print("  ‚Ä¢ results_hp_malloc.csv  - Donn√©es CSV")
    print("  ‚Ä¢ benchmark_hp_malloc.png - Graphiques")
    print("="*60 + "\n")

if __name__ == "__main__":
    csv_file = "results_hp_malloc.csv"
    
    try:
        display_summary(csv_file)
    except FileNotFoundError:
        print(f"‚ùå Erreur : Le fichier {csv_file} n'existe pas.")
        print("Veuillez d'abord ex√©cuter : ./run_benchmark_pipeline.sh")
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
